package com.w.wenda.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.w.wenda.model.MessageModel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MESSAGE_MODEL".
*/
public class MessageModelDao extends AbstractDao<MessageModel, Long> {

    public static final String TABLENAME = "MESSAGE_MODEL";

    /**
     * Properties of entity MessageModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Type = new Property(1, int.class, "type", false, "TYPE");
        public final static Property Code = new Property(2, String.class, "code", false, "CODE");
        public final static Property Message = new Property(3, String.class, "message", false, "MESSAGE");
        public final static Property EmojiUnicode = new Property(4, int.class, "emojiUnicode", false, "EMOJI_UNICODE");
        public final static Property WebUrl = new Property(5, String.class, "webUrl", false, "WEB_URL");
        public final static Property ImageUrl = new Property(6, String.class, "imageUrl", false, "IMAGE_URL");
        public final static Property User_id = new Property(7, String.class, "user_id", false, "USER_ID");
        public final static Property MessageList = new Property(8, String.class, "messageList", false, "MESSAGE_LIST");
    }


    public MessageModelDao(DaoConfig config) {
        super(config);
    }
    
    public MessageModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MESSAGE_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TYPE\" INTEGER NOT NULL ," + // 1: type
                "\"CODE\" TEXT," + // 2: code
                "\"MESSAGE\" TEXT," + // 3: message
                "\"EMOJI_UNICODE\" INTEGER NOT NULL ," + // 4: emojiUnicode
                "\"WEB_URL\" TEXT," + // 5: webUrl
                "\"IMAGE_URL\" TEXT," + // 6: imageUrl
                "\"USER_ID\" TEXT," + // 7: user_id
                "\"MESSAGE_LIST\" TEXT);"); // 8: messageList
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MESSAGE_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getEmojiUnicode());
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(6, webUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(8, user_id);
        }
 
        String messageList = entity.getMessageList();
        if (messageList != null) {
            stmt.bindString(9, messageList);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MessageModel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getType());
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(3, code);
        }
 
        String message = entity.getMessage();
        if (message != null) {
            stmt.bindString(4, message);
        }
        stmt.bindLong(5, entity.getEmojiUnicode());
 
        String webUrl = entity.getWebUrl();
        if (webUrl != null) {
            stmt.bindString(6, webUrl);
        }
 
        String imageUrl = entity.getImageUrl();
        if (imageUrl != null) {
            stmt.bindString(7, imageUrl);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(8, user_id);
        }
 
        String messageList = entity.getMessageList();
        if (messageList != null) {
            stmt.bindString(9, messageList);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MessageModel readEntity(Cursor cursor, int offset) {
        MessageModel entity = new MessageModel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // type
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // code
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // message
            cursor.getInt(offset + 4), // emojiUnicode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // webUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // imageUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_id
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // messageList
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MessageModel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setType(cursor.getInt(offset + 1));
        entity.setCode(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMessage(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmojiUnicode(cursor.getInt(offset + 4));
        entity.setWebUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setImageUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_id(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setMessageList(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MessageModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MessageModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MessageModel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
